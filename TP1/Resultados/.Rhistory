Important.measures = function(X, X.Transactions){
Soporte.compartido = interestMeasure(X, method = c("support"),
transactions = X.Transactions)
Soporte.izquierdo = Soporte.compartido/interestMeasure(X, method = c("confidence"),
transactions = X.Transactions)
Confidence = interestMeasure(X, method = c("confidence"),
transactions = X.Transactions)
lift = interestMeasure(X, method = c("lift"),
transactions = X.Transactions)
soporte.derecho = Soporte.compartido /(Soporte.izquierdo*lift)
Kulczinsky = Soporte.compartido*((1/Soporte.izquierdo) + (1/soporte.derecho))/2
IR = abs(Soporte.izquierdo -soporte.derecho)/(Soporte.izquierdo + soporte.derecho - Soporte.compartido)
Other.Measures = interestMeasure(X, method = c("chiSquared", "cosine"),
transactions = X.Transactions)
Measures = cbind(Other.Measures, Kulczinsky, IR)
return(Measures)
}
prunning.fun = function(X){
X <- sort(X, by="lift")
subset.X <- is.subset(X, X)
subset.X[lower.tri(subset.X, diag=T)] <- NA
redundant <- colSums(subset.X, na.rm=T) >= 1
X.pruned <- X[!redundant]
return(X.pruned)
}
data.frame.rules = function(X){
X = prunning.fun(X)
X = sort(X, by="Kulczinsky")
X = as(X, "data.frame")
return(X)
}
setwd("/run/media/ahriman/Stuff/MDMKD/Primer cuatrimestre/DM/TP1/Resultados/")
library(xlsx)
library(reshape)
library(arules)
library(DiscriMiner)
datos = read.csv("TP1_DM - Base Consolidada_SINNEGATIVOS.csv", sep = ",", encoding = 'UTF-8')
datos[["Fecha"]] = as.Date(datos[["Fecha"]], "%d/%m/%Y")
Info.Demograficas = unique(datos[,c("Venta_ID", "cli_Loc", "CLI_Prv")])
Info.Demograficas = as.data.frame(binarize(Info.Demograficas[,c("cli_Loc", "CLI_Prv")]))
Producto = datos[,c("Venta_ID", "Prod_ID", "SubCat_Desc", "Cat_Desc", "DescGen")]
Producto[,"Venta_ID"] = as.factor(Producto[,"Venta_ID"])
for(i in 1:ncol(Producto))
Producto[,i] = droplevels(Producto[,i])
rm(datos)
Producto = unique(Producto)
##Tablas
Producto.table = as(as.matrix(as.data.frame.matrix(table(Producto[,c("Venta_ID", "Prod_ID")]))), "transactions")
SubCat.table = as(as.matrix(as.data.frame.matrix(table(Producto[,c("Venta_ID", "SubCat_Desc")]))), "transactions")
Cat.table = as(as.matrix(as.data.frame.matrix(table(Producto[,c("Venta_ID", "Cat_Desc")]))), "transactions")
DescGen.table = as(as.matrix(as.data.frame.matrix(table(Producto[,c("Venta_ID", "DescGen")]))), "transactions")
reglas.producto = apriori(Producto.table, parameter = list(supp = 0.005, conf = 0.6))
reglas.SubCat = apriori(SubCat.table, parameter = list(supp = 0.005, conf = 0.6))
reglas.Cat = apriori(Cat.table, parameter = list(supp = 0.005, conf = 0.6))
reglas.DescGen = apriori(DescGen.table, parameter = list(supp = 0.005, conf = 0.6))
medidas.cat = Important.measures(reglas.Cat, Cat.table)
medidas.SubCat = Important.measures(reglas.SubCat, SubCat.table)
medidas.Prod = Important.measures(reglas.producto, Producto.table)
medidas.DescGen = Important.measures(reglas.DescGen, DescGen.table)
quality(reglas.Cat) = cbind(quality(reglas.Cat), medidas.cat)
quality(reglas.SubCat) = cbind(quality(reglas.SubCat), medidas.SubCat)
quality(reglas.producto) = cbind(quality(reglas.producto), medidas.Prod)
quality(reglas.DescGen) = cbind(quality(reglas.DescGen), medidas.DescGen)
#reglas.producto.subset = subset(reglas.producto, Kulczinsky > 0.6)
reglas.Cat.prunned = data.frame.rules(reglas.Cat)
reglas.SubCat.prunned = data.frame.rules(reglas.SubCat)
reglas.producto.prunned = data.frame.rules(reglas.producto)
reglas.DescGen.prunned = data.frame.rules(reglas.DescGen)
Prod.table = as.matrix(cbind(as.data.frame.matrix(table(Producto[,c("Venta_ID", "Prod_ID")])), Info.Demograficas))
Prod.table = as(Prod.table, "transactions")
DescGen.table = as.matrix(cbind(as.data.frame.matrix(table(Producto[,c("Venta_ID", "DescGen")])), Info.Demograficas))
DescGen.table = as(DescGen.table, "transactions")
SubCat.table = as.matrix(cbind(as.data.frame.matrix(table(Producto[,c("Venta_ID", "SubCat_Desc")])), Info.Demograficas))
SubCat.table = as(SubCat.table, "transactions")
Cat.table = as.matrix(cbind(as.data.frame.matrix(table(Producto[,c("Venta_ID", "Cat_Desc")])), Info.Demograficas))
Cat.table = as(Cat.table, "transactions")
###Reglas para todos los grupos
Prod.rules.Demograficas = apriori(Prod.table, parameter = list(supp = 0.005, conf = 0.6))
DescGen.rules.Demograficas = apriori(DescGen.table, parameter = list(supp = 0.005, conf = 0.6))
SubCat.rules.Demograficas = apriori(SubCat.table, parameter = list(supp = 0.005, conf = 0.6))
Cat.rules.Demograficas = apriori(Cat.table, parameter = list(supp = 0.005, conf = 0.6))
###Agregando medidas para las reglas
quality(Prod.rules.Demograficas) = cbind(quality(Prod.rules.Demograficas), Important.measures(Prod.rules.Demograficas, Prod.table))
quality(DescGen.rules.Demograficas) = cbind(quality(DescGen.rules.Demograficas), Important.measures(DescGen.rules.Demograficas, DescGen.table))
quality(SubCat.rules.Demograficas) = cbind(quality(SubCat.rules.Demograficas), Important.measures(SubCat.rules.Demograficas, SubCat.table))
quality(Cat.rules.Demograficas) = cbind(quality(Cat.rules.Demograficas), Important.measures(Cat.rules.Demograficas, Cat.table))
###Podando reglas
Prod.rules.Demograficas = data.frame.rules(Prod.rules.Demograficas)
DescGen.rules.Demograficas = data.frame.rules(DescGen.rules.Demograficas)
SubCat.rules.Demograficas = data.frame.rules(SubCat.rules.Demograficas)
Cat.rules.Demograficas = data.frame.rules(Cat.rules.Demograficas)
setdiff(Prod.rules.Demograficas, reglas.producto.prunned)
length(setdiff(Prod.rules.Demograficas, reglas.producto.prunned))
class(setdiff(Prod.rules.Demograficas, reglas.producto.prunned))
nrow(setdiff(Prod.rules.Demograficas, reglas.producto.prunned))
nrow(Prod.rules.Demograficas)
intersect(Prod.rules.Demograficas, reglas.producto.prunned)
nrow(intersect(Prod.rules.Demograficas[,1], reglas.producto.prunned[,1]))
intersect(Prod.rules.Demograficas[,1], reglas.producto.prunned[,1])
is.element(reglas.producto.prunned[,1], Prod.rules.Demograficas[,1])
nrow(is.element(Prod.rules.Demograficas[,1], reglas.producto.prunned[,1]))
is.element(Prod.rules.Demograficas[,1], reglas.producto.prunned[,1])
reglas.existentes = is.element(Prod.rules.Demograficas[,1], reglas.producto.prunned[,1])
nrow(Prod.rules.Demograficas[reglas.existentes,])
nrow(Prod.rules.Demograficas[!reglas.existentes,])
Prod.rules.Demograficas[!reglas.existentes,]
relgas = Prod.rules.Demograficas[!reglas.existentes,]
View(relgas)
colnames(Prod.rules.Demograficas)
reglas.existentes.prod = is.element(Prod.rules.Demograficas[,"rules"], reglas.producto.prunned[,"rules"])
Nuevas.reglas.producto = Prod.rules.Demograficas[!reglas.existentes.prod,]
reglas.existentes.DescGen = is.element(DescGen.rules.Demograficas[,"rules"], reglas.DescGen.prunned[,"reglas"])
Nuevas.reglas.DescGen = DescGen.rules.Demograficas[!reglas.existentes.DescGen]
reglas.existentes.DescGen = is.element(DescGen.rules.Demograficas[,"rules"], reglas.DescGen.prunned[,"rules"])
Nuevas.reglas.DescGen = DescGen.rules.Demograficas[!reglas.existentes.DescGen]
reglas.existentes.SubCat = is.element(SubCat.rules.Demograficas[["rules"]], reglas.SubCat.prunned[["rules"]])
Nuevas.reglas.SubCat = SubCat.rules.Demograficas[!reglas.existentes.SubCat]
reglas.existentes.prod = is.element(Prod.rules.Demograficas[,"rules"], reglas.producto.prunned[,"rules"])
Nuevas.reglas.producto = Prod.rules.Demograficas[!reglas.existentes.prod,]
reglas.existentes.DescGen = is.element(DescGen.rules.Demograficas[,"rules"], reglas.DescGen.prunned[,"rules"])
Nuevas.reglas.DescGen = DescGen.rules.Demograficas[!reglas.existentes.DescGen]
reglas.existentes.DescGen
ncol(DescGen.rules.Demograficas)
DescGen.rules.Demograficas
reglas.DescGen.prunned
nrow(DescGen.rules.Demograficas)
length)reglas.existentes.DescGen
length(reglas.existentes.DescGen)
reglas.existentes.prod = is.element(Prod.rules.Demograficas[,"rules"], reglas.producto.prunned[,"rules"])
Nuevas.reglas.producto = Prod.rules.Demograficas[!reglas.existentes.prod,]
reglas.existentes.DescGen = is.element(DescGen.rules.Demograficas[,"rules"], reglas.DescGen.prunned[,"rules"])
Nuevas.reglas.DescGen = DescGen.rules.Demograficas[!reglas.existentes.DescGen,]
reglas.existentes.SubCat = is.element(SubCat.rules.Demograficas[["rules"]], reglas.SubCat.prunned[["rules"]])
Nuevas.reglas.SubCat = SubCat.rules.Demograficas[!reglas.existentes.SubCat,]
reglas.existentes.Cat = is.element(Cat.rules.Demograficas[["rules"]], reglas.Cat.prunned[["rules"]])
Nuevas.reglas.Cat = Cat.rules.Demograficas[!reglas.existentes.Cat,]
write.xlsx(Nuevas.reglas.producto, "4_Reglas_Demograficas_Nuevas.xlsx", sheetName = "Producto", row.names = F)
write.xlsx(Nuevas.reglas.DescGen, "4_Reglas_Demograficas_Nuevas.xlsx", sheetName = "Descripción General", row.names = F, append = T)
write.xlsx(Nuevas.reglas.SubCat, "4_Reglas_Demograficas_Nuevas.xlsx", sheetName = "Subcategoría", row.names = F, append = T)
write.xlsx(Nuevas.reglas.Cat, "4_Reglas_Demograficas_Nuevas.xlsx", sheetName = "Categoría", row.names = F, append = T)
